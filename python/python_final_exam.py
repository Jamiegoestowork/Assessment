# -*- coding: utf-8 -*-
"""python_final_exam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17phYo0L7-WzdTzdr0cX55s5bHCEn-_H0
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#1a
data_df = pd.read_csv('/content/Final Dataset - IPL.csv')

#1b
data_df.head()
data_df.shape
data_df.info()
data_df.describe()
data_df[data_df.isna().any(axis=1)]
#no missing values

#2a
data_df.isna().any()
#there are no missing values

#2b
data_df['match_id'].value_counts()[data_df['match_id'].value_counts()>1]

#as the match_id is unique for every match we have check whether any match_id is repeating and we found that there are no duplicate entries in the data

#3a
data_df.describe()

mean_df = data_df[['match_id','first_ings_score','first_ings_wkts','second_ings_score','second_ings_wkts','margin','highscore']].mean()
median_df = data_df[['match_id','first_ings_score','first_ings_wkts','second_ings_score','second_ings_wkts','margin','highscore']].median()
std_df = data_df[['match_id','first_ings_score','first_ings_wkts','second_ings_score','second_ings_wkts','margin','highscore']].std()
variance_array = np.var(data_df[['match_id','first_ings_score','first_ings_wkts','second_ings_score','second_ings_wkts','margin','highscore']],axis=0)

#4 toss decision vs match win
plt.subplots(figsize=(8, 8))
df_2dhist = pd.DataFrame({
    x_label: grp['won_by'].value_counts()
    for x_label, grp in data_df.groupby('toss_decision')
})
sns.heatmap(df_2dhist)
plt.xlabel('toss_decision')
_ = plt.ylabel('won_by')

#4 continuation
first_ings_df = data_df[['match_id','first_ings_score']]
first_ings_df.plot(kind='scatter', x='match_id', y='first_ings_score', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)



second_ings_df = data_df[['match_id','second_ings_score']]

second_ings_df.plot(kind='scatter', x='match_id', y='second_ings_score', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)


#As the match_id kept increasing that is during latter matches the score in second innings was less compared to first innnings

#5
data_df.head()


toss_match_winner_count = data_df[data_df['toss_winner']==data_df['match_winner']].groupby(['toss_winner','match_winner'])['toss_winner'].agg(['count'])['count']
toss_match_winner_count
#gujarat has the highest toss win to match win ratio

#6
plt.plot(data_df['match_id'], data_df['highscore'])

#well, in my opinion we should not remove outliers as they are crucial for predicting/understanding further matches, such as highesta_score and other values as they are not that much far from average values

#7
new = data_df[['venue','match_winner'	]].groupby(['venue','match_winner'])[['match_winner']].agg(['count']).sort_values(by=[('match_winner', 'count')],ascending=False)
new
#in mumbai stadium delhi and banglore had highest wins

#8
player_of_the_match_count = data_df['player_of_the_match'].value_counts().head(1)
best_bowling_and_player_of_the_match = data_df[data_df['player_of_the_match']==data_df['best_bowling']][['best_bowling']].groupby(['best_bowling'])['best_bowling'].agg(['count']).sort_values(by='count',ascending=False).head(1)

print(player_of_the_match_count)
print(best_bowling_and_player_of_the_match)
#kuldeep yadav is the highest repeated player of the match player due to best_bowling

#9
#The average score is higher in first innings compared to second innings(avg_first_inngs_score=171.12,avg_second_inngs_score=158)
#The player with most player of the match award was kuldeep yadav and it was due to him taking most wickets in a match for 3 matches.
#Gujarat has the highest toss win to match win ratio compared to all other teams.
#you can observe how toss decision is related to how the team has won, whether it be by wickets or by runs in the below heatmap

plt.subplots(figsize=(8, 8))
df_2dhist = pd.DataFrame({
    x_label: grp['won_by'].value_counts()
    for x_label, grp in data_df.groupby('toss_decision')
})
sns.heatmap(df_2dhist)
plt.xlabel('toss_decision')
_ = plt.ylabel('won_by')

