# -*- coding: utf-8 -*-
"""clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UT0ie3FPAWRNfJylqXinZZEZnqwTwSn5
"""

import pandas as pd
import seaborn as sns

df = pd.read_csv('/content/Mall_Customers.csv')
df.head()

df.shape

for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

for column in df.select_dtypes(include=['object']).columns:
    plt.figure(figsize=(10, 5))
    df[column].value_counts().plot(kind='bar')
    plt.title(f'Bar Chart of {column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.show()

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
for i in range(len(numerical_columns)):
    for j in range(i + 1, len(numerical_columns)):
        plt.figure(figsize=(10, 6))
        sns.scatterplot(data=df, x=numerical_columns[i], y=numerical_columns[j])
        plt.title(f'Scatter Plot between {numerical_columns[i]} and {numerical_columns[j]}')
        plt.show()

data = df.dropna()
data.shape

data = data.drop('CustomerID',axis=1)
data.head()

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()

data['Gender'] = label_encoder.fit_transform(data['Gender'])
data.head()

for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

# Plot histograms for numerical columns
for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()
# Plot bar charts for categorical columns
for column in df.select_dtypes(include=['object']).columns:
    plt.figure(figsize=(10, 5))
    df[column].value_counts().plot(kind='bar')
    plt.title(f'Bar Chart of {column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.show()
# Plot the correlation matrix as a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Heatmap of Correlation Matrix')
plt.show()
# Generate scatter plots for pairs of numerical variables
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
for i in range(len(numerical_columns)):
    for j in range(i + 1, len(numerical_columns)):
        plt.figure(figsize=(10, 6))
        sns.scatterplot(data=df, x=numerical_columns[i], y=numerical_columns[j])
        plt.title(f'Scatter Plot between {numerical_columns[i]} and {numerical_columns[j]}')
        plt.show()

from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
scaler = StandardScaler()
mms = MinMaxScaler()
data=pd.DataFrame(scaler.fit_transform(data),columns=data.columns)
data

import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
kmeans=KMeans(n_clusters=3,init='k-means++')
y_pred=kmeans.fit_predict(data)
data['Cluster']=y_pred
print(kmeans.cluster_centers_)

df1=data[data.Cluster==0]
df2=data[data.Cluster==1]
df3=data[data.Cluster==2]
plt.scatter(df1['Annual Income (k$)'],df1['Spending Score (1-100)'],color='green')
plt.scatter(df2['Annual Income (k$)'],df2['Spending Score (1-100)'],color='red')
plt.scatter(df3['Annual Income (k$)'],df3['Spending Score (1-100)'],color='black')
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.xlabel('AgeGroup')
plt.ylabel('Spend')
plt.legend()
plt.show()

from sklearn.metrics import silhouette_score
sse = []
sil_score=[]
k_nrg=range(1,10)
for k in range(1,10):
   kmeans = KMeans(n_clusters=k)
   kmeans.fit(data)
   sse.append(kmeans.inertia_)
   if k>=2:
    x=silhouette_score(data, kmeans.fit_predict(data))
    sil_score.append(x)
plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.plot(sse)
plt.show()
plt.xlabel('K')
plt.ylabel('Silhouette Score')
plt.plot(range(2,10),sil_score,color='red')
plt.show()